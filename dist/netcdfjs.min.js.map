{"version":3,"sources":["webpack:///netcdfjs/webpack/universalModuleDefinition","webpack:///netcdfjs/webpack/bootstrap 4f17d0665f763d40fc22","webpack:///netcdfjs/./src/utils.js","webpack:///netcdfjs/./src/types.js","webpack:///netcdfjs/(webpack)/buildin/global.js","webpack:///netcdfjs/./src/data.js","webpack:///netcdfjs/./src/header.js","webpack:///netcdfjs/./~/iobuffer/IOBuffer.js","webpack:///netcdfjs/./src/index.js","webpack:///netcdfjs/(webpack)/buildin/module.js","webpack:///netcdfjs/(webpack)/~/node-libs-browser/~/buffer/index.js","webpack:///netcdfjs/(webpack)/~/node-libs-browser/~/buffer/~/base64-js/index.js","webpack:///netcdfjs/(webpack)/~/node-libs-browser/~/buffer/~/ieee754/index.js","webpack:///netcdfjs/(webpack)/~/node-libs-browser/~/buffer/~/isarray/index.js","webpack:///netcdfjs/./~/iobuffer/~/utf8/utf8.js"],"names":[],"mappings":"sGAAA,cACA,2BACA,uCACA,sCACA,cACA,GACA,0CAEA,eACA,GAAC,mBACD,kBCTA,cAMA,MACA,eAGA,mBACA,GACA,EACA,KAIA,mDAGA,KAGA,OACA,OAIA,IAzBA,iBA4BA,MAGA,iBAA2C,OAAc,EAGzD,qBACA,OACA,8BACA,CACA,gBACA,kBAGA,GAGA,iBACA,YACA,qBAA2B,UAA0B,UACrD,YAAiC,OAAe,EAChD,mBACA,GACA,CAGA,mBAAsD,+CAA+D,EAGrH,MAGA,0BC9DA,aAiBiB,aACb,CACI,CADC,IAAO,OAAS,KACV,KAAK,EAAK,EAAO,OAE/B,EAGD,CAmBA,EAAO,QAAoB,UArCG,aAC1B,IACI,OAAM,IAAI,WAAU,iCAE3B,EAED,EAgCA,EAAO,QAAQ,QAAU,EACzB,EAAO,QAAmB,SAfR,WAEd,IAAI,GAAa,EACjB,aAAI,EAAO,EAAO,UAMlB,YACA,GACH,oBC3CD,aAkG0B,eACtB,IAAa,CAAT,KACA,KACK,GADS,GAAI,MAClB,GAAS,EAAI,EAAG,EAAI,EAChB,MAAQ,GAEZ,UACH,EACG,OAEP,IAED,CAmCkB,aACd,OACI,EADA,KAAM,WAAW,EAAM,OAAS,GACzB,EAAM,UAAU,EAAG,EAAM,OAEpC,GACH,EApJD,KAAM,GAAY,EAAQ,GAE1B,UAAM,EACF,MACA,OACA,QACA,MACA,QACA,SAGJ,GA2IA,EAAO,QAAU,EACjB,EAAO,QAAkB,QAtIR,WACb,CAAQ,QACJ,OAAK,GACD,WACJ,WAAK,GACD,WACJ,WAAK,GACD,YACJ,YAAK,GACD,UACJ,UAAK,GACD,YACJ,YAAK,GACD,aAEJ,SACI,cAEX,aAED,EAmHA,EAAO,QAAoB,UA7GR,WACf,CAAQ,QACJ,OAAK,GACD,WACJ,OAAK,GACD,WACJ,OAAK,GACD,YACJ,OAAK,GACD,UACJ,OAAK,GACD,YACJ,OAAK,GACD,aAEJ,GACI,cAAO,CAElB,GAED,EA0FA,EAAO,QAAkB,QApFR,WACb,CAAQ,OACJ,UACI,aAAO,GACX,SACI,aAAO,GACX,SACI,cAAO,GACX,UACI,YAAO,GACX,QACI,cAAO,GACX,UACI,eAAO,GAEX,OACI,cAAO,CAElB,GAED,EAiEA,EAAO,QAAmB,SAtCM,eAC5B,OACI,KAAK,EACD,KAAO,EAAO,UAClB,OAAK,EACD,KAAO,EAAS,EAAO,UAC3B,QAAK,EACD,MAAO,EAAW,EAAM,EAAO,UAAU,KAC7C,QAAK,EACD,IAAO,EAAW,EAAM,EAAO,UAAU,KAC7C,QAAK,EACD,MAAO,EAAW,EAAM,EAAO,YAAY,KAC/C,QAAK,EACD,OAAO,EAAW,EAAM,EAAO,YAAY,KAG3C,KAAU,KAAM,kBAG3B,UAED,eC3IA,GAGA,aACA,OACA,KAAC,IAED,GAEA,0CACA,OAAC,SAED,CACA,4BACA,OAI4C,CAE5C,6BCpBA,aAEA,KAAM,GAAQ,EAId,GAqDA,EAAO,QAAoB,UA9CA,aAEvB,MAAM,GAAO,EAAM,QAAQ,EAG3B,UAIK,GAJD,GAAO,EAAS,KAAO,EAAM,UAGjC,GAAW,EAAI,MACf,GAAS,EAAI,EAAG,EAAI,EAChB,MAAK,GAAK,EAAM,SAAS,EAAQ,EAGrC,SACH,EAED,EA+BA,EAAO,QAAiB,OAvBU,eAE9B,MAAM,GAAO,EAAM,QAAQ,EAC3B,MAAM,EAAQ,EAAS,KAAO,EAAS,KAAO,EAAM,UAAU,GAI9D,KAAI,GAAO,EAGX,OAAW,EAAI,MACf,QAAM,GAAO,EAEb,eAAK,MAAI,EAAI,EAAG,EAAI,EACZ,MAAgB,EACpB,SAAK,GAAK,EAAM,SAAS,EAAQ,EACjC,KAAO,KAAK,EAGhB,SACH,qBCzDD,aAmDwB,aACpB,IAAI,GACJ,OAAM,GAAU,EAChB,gBAAI,IACA,EAGA,SAHM,UAAW,EAAO,eAAiB,EACzC,+CAEM,UAAW,IAAY,EAG7B,yCAAM,GAAgB,EACtB,iBACK,MADY,EAAI,MACrB,GAAS,EAAM,EAAG,EAAM,EAAe,IAE/B,GAAO,EAAM,SAGjB,QAAM,GAAO,EACb,aACI,CADA,SAEA,IAGJ,KAAW,GACP,MACA,OAEP,EAEL,OACI,YACA,WACA,aAEP,EAED,CASwB,aACpB,MAAM,GAAW,EACjB,gBAAI,IACA,EAGA,SAHM,UAAW,EAAO,eAAiB,EACzC,+CAEM,UAAW,IAAa,EAG9B,yCAAM,GAAgB,EACtB,iBACK,GADY,GAAI,MACrB,GAAS,EAAO,EAAG,EAAO,EAAe,IAErC,IAAI,GAAO,EAAM,SAGjB,GAAI,EAAO,EACX,eAAM,UAAmB,CAAP,IAAqB,CAAP,GAAY,kBAG5C,MAAI,GAAO,EACX,aAAI,EAAQ,EAAM,SAAS,EAAQ,EAGnC,KAAM,QAEN,KAAW,GACP,MACA,OAAM,EAAM,QACZ,SAEP,EAEL,OACH,EAED,CAcyC,iBACrC,MAAM,GAAU,EAChB,gBAAI,GACJ,KAAI,IACA,EAGA,SAHM,UAAW,EAAO,eAAiB,EACzC,8CAEM,UAAW,IAAY,EAG7B,wCAAM,GAAe,EACrB,iBACK,MADW,EAAI,MACpB,GAAS,EAAI,EAAG,EAAI,EAAc,IAE1B,GAAO,EAAM,SAGjB,QAAM,GAAiB,EAGvB,iBACK,GADe,GAAI,MACxB,GAAS,EAAM,EAAG,EAAM,EACpB,MAAc,GAAO,EAIzB,gBAAI,GAAa,EAGjB,GAAI,EAAO,EACX,eAAM,UAAmB,CAAP,IAAqB,CAAP,GAAY,kBAK5C,QAAM,GAAU,EAIhB,gBAAI,GAAS,EACb,aACI,CADD,SACO,UAAqB,CAAV,IACjB,2CAAS,EAIb,cAAI,EAAc,KACd,OAGJ,KAAU,GACN,MACA,aACA,aACA,OAAM,EAAM,QACZ,QACA,SACA,SAAS,EAAc,KAE9B,EAGL,OACI,WACA,aAEP,GAlND,KAAM,GAAQ,EACd,GAAM,EAAQ,EAGd,GAAM,EACN,EAAM,EACN,GAAM,EACN,GAAM,EAEN,GA2MA,EAAiB,QAjMO,aAGpB,IAAI,GAAS,CAAC,gBAAiB,CAAC,OAAQ,EAGxC,eAAI,EAAU,EACd,KAAO,gBAAgB,GAAK,EAC5B,WAAO,gBAAgB,KAAO,EAC9B,aAAO,WAAa,EAGpB,aAAO,iBAAmB,EAG1B,MAAI,GAAY,EAAc,EAAQ,EAAQ,SAC9C,YAAO,UAAY,EACnB,YAAO,gBAAgB,WAAa,EAEpC,WACH,CAED,4CC3CA,CAEA,UAGA,IAkBA,KAogBA,UAngBA,KACA,iBACA,GACA,SACA,MACA,aAEA,QACA,qCAEA,IACA,6BAGA,0CACA,qBACA,IACA,IACA,iCACA,4BAEA,OAEA,8BACA,EAEA,EAEA,cACA,cACA,kBACA,kBACA,cACA,OACA,sDACA,cACA,OACA,SAOA,aACA,uBACA,uBACA,MAMA,iBACA,aACA,YAMA,kBACA,aACA,gBACA,IAMA,cACA,aACA,YAMA,eACA,aACA,gBACA,IAOA,QACA,uBACA,gBACA,EACA,IAOA,QACA,oBACA,EACA,IAOA,OACA,wBACA,OACA,IAOA,QACA,yBACA,MACA,IAOA,WACA,8BACA,QACA,IAOA,UACA,qBACA,oCACA,qCACA,GACA,IAMA,SACA,oBACA,EACA,IASA,mBACA,mBACA,sBACA,qBACA,IACA,qBACA,6BACA,uBACA,mCACA,+BACA,OACA,OACA,KAOA,cACA,OACA,qBAMA,WACA,gCACA,SAMA,YACA,iCACA,SAMA,WACA,aACA,WAOA,aACA,gBACA,4BACA,KAAuB,IAAO,EAC9B,cAEA,iBACA,EAMA,YACA,4CACA,kCACA,EACA,CAMA,aACA,6CACA,kCACA,EACA,CAMA,YACA,4CACA,kCACA,EACA,CAMA,aACA,6CACA,kCACA,EACA,CAMA,cACA,8CACA,kCACA,EACA,CAMA,cACA,8CACA,kCACA,EACA,CAMA,WACA,iCACA,WAOA,aACA,gBACA,YACA,YAAuB,IAAO,EAC9B,cAEA,yBACA,GAOA,YACA,gBACA,0BACA,mBACA,EAOA,gBACA,0BACA,OACA,IAOA,aACA,6BACA,oCACA,QACA,yBACA,IAOA,cACA,6BACA,qCACA,QACA,yBACA,IAOA,aACA,wBACA,EAOA,cACA,wBACA,kBAAuB,MAAkB,OACzC,wCAEA,gBACA,yBACA,IAOA,cACA,6BACA,0CACA,2BACA,OACA,yBACA,IAOA,eACA,6BACA,2CACA,2BACA,OACA,yBACA,IAOA,cACA,6BACA,0CACA,2BACA,OACA,yBACA,IAOA,eACA,6BACA,2CACA,2BACA,OACA,yBACA,IAOA,gBACA,6BACA,4CACA,2BACA,OACA,yBACA,IAOA,gBACA,6BACA,4CACA,2BACA,OACA,yBACA,IAOA,aACA,qCACA,GAOA,cACA,WAAuB,MAAgB,OACvC,iCAEA,UACA,KAOA,aACA,kBACA,0BACA,EAQA,UACA,wDACA,iBAMA,YACA,OACA,2BAIA,sBAFA,UAQA,yBACA,kBACA,8CAEA,OACA,0CCzhBA,aAEA,KAAM,GAAW,EACjB,GAAM,EAAQ,EACd,GAAM,EAAO,EACb,GAAM,EAAa,EAEnB,GAMM,OACF,CAAY,cACR,MAAM,GAAS,GAAI,GACnB,KAGA,iBAAM,UAAmC,KAAxB,KAAO,UAAU,GAGlC,8BAAM,GAAU,EAChB,aAAM,UAAqB,CAAV,GAGjB,wBAAK,OAAS,EAAW,EACzB,QAAK,OAAO,QACZ,OAAK,OACR,CAKD,IAAI,UACA,OACI,EADA,QAAK,OAAO,QAGZ,iBAEP,sBASD,IAAI,kBACA,OAAO,MAAK,OACf,eAOD,IAAI,aACA,OAAO,MAAK,OACf,UAQD,IAAI,mBACA,OAAO,MAAK,OACf,gBAYD,IAAI,YACA,OAAO,MAAK,OACf,SAOD,CAAgB,kBACZ,IACA,YAEI,QAFA,QAAO,GAEI,KAAK,OAAO,UAAU,KAAe,WAC5C,OAAO,GAAI,OACd,CAED,GAIJ,IAAM,UAAwB,WAG9B,2BAAK,OAAO,KAAK,EAEjB,QAAI,EAEA,OAAO,EAAK,OAAO,KAAK,OAAQ,EAAU,KAAK,OAG/C,iBAAO,EAAK,UAAU,KAAK,OAElC,EAtGc,EAyGnB,EAAO,QAAU,eCtHjB,qBACA,UACA,yCACA,IAEA,yBACA,8CACA,CACA,4BACA,UACA,CAEA,iCACA,CACA,4BACA,UACA,CAEA,sBAEA,GACA,oBCrBA,0BA+DA,YACA,UACA,oBACA,WACA,WAEA,iBACA,QACA,wBAEA,uCAEA,uCACA,mBAGA,YACA,qBAEA,eAGA,IACA,EAUA,CAEA,oBACA,6CACA,uBAIA,2BACA,IACA,6BACA,OAGA,mFACA,GACA,qBACA,IAUA,uBACA,IACA,wCAGA,6FACA,wBAGA,IACA,4BAGA,SACA,GASA,CAkBA,cACA,IACA,wCACG,4CACH,0BAEA,wCAEA,uBACA,UACA,IACA,WAEA,IAIA,iBAKA,IAJA,qCACA,kBAEA,GAMA,CAKA,iBACA,MACA,mBACA,YACA,+BAAmB,KAAU,GAC7B,YAGA,QACA,GAIA,CAWA,oBACA,0BACA,cAGA,sBACA,wBAGA,qDACA,mBAEA,uBAEA,gBAIA,mBAGA,KACA,GAEA,iBACA,sBACA,uBACA,eAAiB,KAAY,OAC7B,SAEA,iBACA,IAEA,uBACA,OAEA,+BACA,wBAGA,wDACA,wBAGA,sDACA,2BACG,IACH,8BAEA,yBAGA,MAEA,wBACA,kBAGA,mBAEA,IACA,GAEA,iBACA,mBACA,QACA,8BAEA,IACA,eAGA,mBACA,IACA,GAEA,OACA,IACA,6EACA,4CACA,aAEA,QAGA,iCACA,qBAEA,KAEA,qBACA,sFAEA,cAGA,QACA,yBACA,2EAEA,gBACA,MAqFA,iBACA,eACA,cAEA,2CACA,6EACA,wBAEA,WACA,4BAGA,cACA,uBAGA,GAEA,OADA,gBAEA,QACA,YACA,aACA,eACA,QACA,WACA,QACA,0BACA,WACA,WACA,YACA,cACA,iBACA,UACA,kBACA,MACA,uBACA,OACA,4BACA,kBACA,cAGA,QAGA,oBACA,IASA,wBACA,WAIA,WACA,aAGA,4BACA,kBAGA,QACA,YAIA,YACA,QAEA,MACA,SAGA,eAGA,iBACA,QACA,uBAEA,QACA,WACA,yBAEA,QACA,yBAEA,QACA,aACA,0BAEA,QACA,0BAEA,QACA,WACA,YACA,cACA,4BAEA,IACA,uDACA,eACA,cAGA,OAGA,CAGA,oBACA,WACA,cACA,WACA,GAkIA,0BAEA,yBAGA,KACA,wBACA,MACG,GACH,iBACG,YACH,oBAEA,gBACA,SAEA,wBAIA,uBACA,kBACA,cACA,eACA,CAAG,SACH,cACA,cAIA,KACA,mCAIA,gBAEA,UACA,gBAEA,gBACG,OACH,+BACA,MACA,qBACA,gDACA,2CAEA,gDAGA,oBAGA,wBACA,wCAEA,0BACA,mBAmBA,OACA,UAEA,uBAEA,GAEA,QAzBA,QACA,aAEA,UACA,yBACA,2BACA,+CACA,iBACA,mBAEA,KACA,MACA,MACA,MACA,CAGA,IASA,UACA,SACA,SAAwB,MAAe,GACvC,sCACA,oBAIA,QAGA,sBANA,2BAEA,EAKA,2BACA,OAAwB,GAAQ,WAChC,QACA,UAAqB,KAAe,GACpC,iCACA,CACA,MACA,KAEA,aACA,GAGA,QACA,EAcA,uBACA,SACA,mBACA,GACA,QAGA,MACA,QAKA,QAPA,aAQA,sCAEA,4BACA,UAEA,iBAAiB,KAAY,QAC7B,kCACA,oBACA,cACA,EACA,OACA,IAEA,uBACA,qCACA,IAEA,uBACA,wBACA,IAEA,uBACA,mBACA,IAEA,uBACA,wBACA,IAEA,uBACA,qCACA,IAiFA,oBACA,wBACA,wBAEA,iCAEA,KAEA,oBACA,uBACA,WAEA,UACA,UACA,WACA,OACA,eACA,SACA,SACA,EAEA,eACA,cAEA,GAEA,GADA,GAEA,YAGA,IACA,gBACA,GACA,8BACA,MACA,YAIA,MACA,gBACA,YACA,kBACA,0CACA,0BACA,eAIA,MACA,gBACA,YACA,YACA,iCACA,sDACA,gBACA,gBAIA,YAEA,CAGA,cACA,SACK,GAEL,eACA,cACA,6BAGA,iBACA,QACA,EAEA,UACA,GAIA,CAGA,cACA,WACA,cACA,2CAIA,eACA,MACA,KACA,4BACA,MACA,uBAGA,WACA,IAEA,oBACA,QACA,yBAEA,eAAqB,MAAS,GAC9B,6BAEA,kBACA,IAEA,oBACA,QACA,yBAEA,eAAqB,MAAS,GAC9B,gCAEA,WACA,IAEA,oBACA,WAEA,wBACA,2BAEA,eACA,MAAqB,MAAS,GAC9B,eAEA,WACA,IAEA,oBACA,wBACA,OACA,MAAiB,QAAkB,WACnC,iCAEA,oBACA,IAyCA,oBACA,uCACA,uDACA,yCA8JA,6BACA,wCACA,oFACA,6EACA,sBAiDA,wBACA,oBACA,yCAAuD,MAAO,GAC9D,mCACA,OAEA,eA4BA,wBACA,yBACA,yCAAuD,MAAO,GAC9D,eAEA,wBAiJA,wBACA,yCACA,mDACA,sBAEA,2BACA,OACA,yCAEA,gDACA,MACA,EAUA,2BACA,OACA,0CAEA,iDACA,MACA,EA+HA,eAEA,yBAEA,sBAEA,QACA,oBAEA,UACA,IAEA,eACA,mBACA,+BACA,IAEA,eACA,8BACA,gBACA,IAEA,kBACA,QACA,gBACA,UACA,UACA,KAEA,SAAiB,KAAY,QAC7B,qBAGA,uBAEA,QAEA,aAEA,6BACA,KACA,QAAS,mBAET,6BACA,KACA,QAGA,IAEA,GACA,QAGA,aACA,6BACA,QACA,GACA,QAGA,4BACA,KAAK,KAEL,iCAGA,WAGA,YACA,cACA,cACA,GAAK,iBACL,cACA,SACA,KACA,UAEA,UAAK,kBACL,cACA,SACA,KACA,WACA,aAEA,UAAK,oBACL,cACA,SACA,KACA,WACA,cACA,aAEA,UACA,sBAEA,qBAEA,OACA,IAEA,eACA,QACA,UAAiB,QAAgB,OAEjC,aAEA,6BACA,IAEA,kBACA,eACA,GACA,SAAiB,QAAgB,UAGjC,WAFA,sBAGA,WACA,QACA,YACA,YAGA,UACA,IAEA,eACA,0BACA,KAEA,wBACA,YAAiB,KAAY,+BAE7B,QADA,kBAGA,UACA,IAEA,eACA,aACA,GApvDA;;;;;GAEA,SACA,QACA,aAEA,WACA,aAoTA,YACA,YACA,QAEA,YACA,KAxTA,oBAyBA,GACA,wBACA,6BAQA,UACA,IACA,uBACA,wBAAqB,6CAAmD,UACxE,GACA,eACA,gCACA,+BAAG,UACH,CACA,QACA,EAbA,KAJA,oBAKA,iBAkEA,WAEA,KACA,uBACA,uBACA,UACA,IA0BA,yBACA,qBACA,GAEA,IACA,uDACA,sBACA,8CACA,6BAEA,0CACA,OACA,KAGA,mBA8BA,0BACA,qBACA,KAgBA,0BACA,eACA,GAGA,EACA,8BACA,eACA,KAgHA,uBACA,uBACA,YAEA,yBACA,iCACA,wBAGA,8CAEA,iBACA,aAEA,2BAAuC,OAAS,GAChD,wBACA,OACA,UACA,IACA,KAGA,eACA,QACA,EACA,GAEA,yBACA,gBACA,mBACA,UACA,WACA,YACA,YACA,aACA,aACA,aACA,WACA,YACA,cACA,WACA,SACA,QAEA,YAEA,wBACA,QACA,wBAGA,kDACA,6BAGA,MACA,OACA,mBACA,KAAe,QAAiB,OAChC,gBAIA,4BACA,OACA,SAAa,QAAiB,YAC9B,WACA,mBACA,wBAEA,0DACA,WACA,MACA,OACA,KA6CA,eA0EA,yBAQA,6BACA,aACA,UACA,6BAEA,wDAAiB,KAAS,OAC1B,eAEA,SACA,OAEA,6BACA,aACA,UACA,6BAEA,wDAAiB,KAAS,OAC1B,eACA,kBAEA,SACA,OAEA,6BACA,aACA,UACA,6BAEA,wDAAiB,KAAS,OAC1B,eACA,kBACA,kBACA,kBAEA,SACA,OAEA,+BACA,QACA,2BACA,iCACA,iBACA,YAEA,+BACA,wCACA,2CACA,IACA,wBAEA,8BACA,QACA,QACA,wBACA,oDAAkD,cAClD,0BAEA,wBACA,KAEA,4CACA,gBACA,wBAGA,gCACA,iBAEA,GACA,8BAEA,GACA,iBAEA,GACA,sBAGA,0CACA,4BAGA,qCACA,SAEA,UACA,UAEA,SACA,SAGA,YACA,QACA,QACA,QAEA,kBAEA,iBACA,SACA,kBAEA,qBACA,mBAEA,OAAiB,KAAS,GAC1B,wBACA,OACA,UACA,IACA,KAGA,eACA,QACA,EACA,CAUA,EAkHA,uCACA,QACA,4BAEA,sCACA,qBACA,QAEA,0CACA,qBACA,QAiDA,uCAEA,IACA,eACA,eACA,UAEG,uBACH,uBACA,WACA,UAEG,mBACH,QACA,WACA,SACA,mBAEA,aACA,GAIA,yBACA,OAIA,8FACA,gCAEA,uCACA,4BAGA,kDAEA,QAEA,OADA,gBAEA,QACA,0BAEA,QACA,WACA,4BAEA,QACA,4BAEA,QACA,aACA,6BAEA,QAEA,6BAEA,QACA,WACA,YACA,cACA,+BAEA,IACA,uDACA,eACA,cAGA,SAEA,6BACA,OACA,MACA,yDAEA,KAsFA,YA8DA,iCACA,aACA,YACA,uBAEA,GACA,UACA,aACG,OACH,QAGA,IACA,UACA,aACG,OACH,QAGA,eAEA,OACA,SACA,wCACA,mBACG,cACH,WACA,YACA,sBAAmB,KAAc,GACjC,oBAEA,GAEA,OACA,GAIA,EAMA,yCACA,KACA,MACA,mBAEA,wBACA,OACA,KACA,gBACA,sBAGA,SACA,KAEA,yCACA,KACA,MACA,EACA,iBAGA,2BACA,SACA,aACA,wBAGA,SACA,KAEA,qCACA,wBACA,aACA,KAEA,wCACA,wBACA,6BACA,GAEA,wCACA,wBACA,4BACA,IAEA,wCACA,wBAEA,cACA,gBACA,cACA,IACA,qBAEA,wCACA,wBAEA,QACA,+BACA,eACA,UACA,KAEA,wCACA,KACA,MACA,mBAEA,wBACA,OACA,KACA,gBACA,sBAEA,cAEA,8BAEA,KACA,IAEA,wCACA,KACA,MACA,mBAEA,mBACA,MACA,aACA,iBACA,wBAEA,cAEA,8BAEA,KACA,IAEA,oCACA,wBACA,sBAEA,wBADA,KAGA,uCACA,iBACA,oCACA,gCACA,IAEA,uCACA,iBACA,oCACA,gCACA,IAEA,uCACA,wBAEA,aACA,gBACA,cACA,eACA,IAEA,uCACA,wBAEA,kBACA,eACA,eACA,UACA,IAEA,uCACA,wBACA,8BACA,IAEA,uCACA,wBACA,8BACA,IAEA,wCACA,wBACA,8BACA,IAEA,wCACA,wBACA,8BACA,IAQA,6CACA,QACA,OACA,MACA,MACA,yBACA,qBACA,EAEA,QACA,KACA,eACA,qBACA,kBAGA,oBACA,IAEA,6CACA,QACA,OACA,MACA,MACA,yBACA,qBACA,EAEA,WACA,KACA,kBACA,qBACA,kBAGA,oBACA,IAEA,yCACA,YACA,OACA,yBACA,yCACA,cACA,UACA,GAUA,4CACA,YACA,OACA,2BACA,KACA,8BACA,uBAEA,cAEA,UACA,GAEA,4CACA,YACA,OACA,2BACA,KACA,mCACA,aAEA,mBAEA,UACA,GASA,4CACA,YACA,OACA,gCACA,KACA,qCACA,mBACA,mBACA,WAEA,mBAEA,UACA,GAEA,4CACA,YACA,OACA,gCACA,KACA,mCACA,mBACA,mBACA,aAEA,mBAEA,UACA,GAEA,4CACA,QACA,OACA,MACA,wBAEA,yBACA,GAEA,QACA,KACA,KACA,eACA,qBACA,mBACA,uBAEA,eAGA,4BACA,IAEA,4CACA,QACA,OACA,MACA,wBAEA,yBACA,GAEA,WACA,KACA,KACA,kBACA,qBACA,mBACA,uBAEA,eAGA,4BACA,IAEA,wCACA,YACA,OACA,0BACA,2CACA,sBACA,YACA,UACA,GAEA,2CACA,YACA,OACA,4BACA,SACA,8BACA,uBAEA,cAEA,UACA,GAEA,2CACA,YACA,OACA,4BACA,SACA,mCACA,aAEA,mBAEA,UACA,GAEA,2CACA,YACA,OACA,iCACA,cACA,8BACA,uBACA,kBACA,mBAEA,eAEA,UACA,GAEA,2CACA,YACA,OACA,iCACA,oCACA,KACA,mCACA,mBACA,mBACA,aAEA,mBAEA,UACA,GAeA,2CACA,yBACA,KAEA,2CACA,yBACA,KAUA,4CACA,yBACA,KAEA,4CACA,yBACA,GAEA,EACA,sCACA,YACA,wBACA,8BACA,gBACA,oBAGA,kBACA,2CAGA,MACA,0BAEA,2EACA,0DAGA,oDACA,wBACA,qBAGA,OAGA,UAFA,2BAIA,aAAqB,EAAQ,MAC7B,uBAEG,uBAEH,2BAAe,KAAS,GACxB,uBAGA,kCACA,KACA,uBACA,IAIA,UACA,GAKA,EACA,sCAEA,wBACA,IACA,wBACA,MACA,UACK,QACL,yBACA,WAEA,sBACA,sBACA,GACA,YAEA,GACA,iBACA,wCAEA,mEACA,6CAEA,GAAG,KACH,0BAIA,0CACA,wBAGA,6BACA,SAGA,YACA,kCAEA,UAEA,MACA,OACA,2BAAmB,MAAS,GAC5B,cAEG,OACH,mBACA,IACA,mBACA,kBACA,cAAe,QAAiB,GAChC,uBAEA,GAEA,OACA,KAGA,EAEA,0DC7mDA,aAmBA,aACA,SACA,UACA,sBAQA,sFACA,EAsCA,aACA,6CACA,MAEA,iBACA,QACA,GACA,OAAqB,IAAS,KAC9B,+BACA,YAEA,kBACA,IA/EA,aA+BA,WAEA,uBACA,IAjCA,cAmCA,WACA,eACA,MACA,WAEA,iBAGA,aAEA,QAEA,YAAoB,IAAO,UAC3B,6FACA,WACA,iBACA,gBAGA,YACA,sDACA,SACG,OACH,+EACA,SACA,gBAGA,OACA,GA/DA,EAEA,cA6EA,WACA,QACA,OACA,WACA,IACA,GACA,OAGA,cAA0C,IAAU,KACpD,yBAIA,UACA,aACA,WACA,QACA,YACG,MACH,yBACA,WACA,SACA,cACA,YAGA,YAEA,UACA,KAtGA,OAJA,MACA,sCAEA,8FACkC,SAAS,EAC3C,WACA,sBACA,EAEA,wBACA,uCCjBA,0BACA,OACA,UACA,WACA,OACA,KACA,UACA,SACA,QAEA,GAKQ,OAHR,cACA,OACA,KACA,EAAmB,2BAEnB,GAGQ,gBAFR,OACA,KACA,EAAmB,2BAEnB,MACA,UACG,cACH,wBAEA,uBACA,MAEA,gCACA,IAEA,6BACA,SACA,UACA,WACA,OACA,sDACA,UACA,SACA,wBAEA,EAiCQ,eA/BR,iBACA,uBACA,IAEA,kCACA,KACA,yBACA,OAEA,MACA,SAEA,iBAEA,GACA,SACA,OAGA,QACA,KACA,IACK,GACL,6BACA,MAEA,mCACA,KAIA,IAAmB,iCAEnB,GAEQ,WADR,KACA,EAAkB,gCAElB,aACA,oBCnFA,MAAiB,YAEjB,oCACA,OACA,6DCJA,GACC,eAGD,cAmBA,QAIA,GACA,EAJA,OACA,MACA,SAGA,kBACA,2BAEA,kBACA,KACA,gDAIA,eACA,GAGA,aAGA,SACA,EAGA,cACA,QAGA,OAFA,UACA,IAEA,OACA,OACA,GACA,aACA,WACA,2BAEA,aAEA,SACA,EAEA,cACA,cACA,cACA,0CACA,cAGA,yBAGA,gBACA,UACA,YAEA,cACA,IACA,2BAEA,SACA,SACA,uBAEA,aACA,qBACA,OACA,qBAEA,IACA,wBACA,oBACA,WAEA,SACA,UACA,CAEA,aAgBA,OACA,cAGA,4BACA,YAEA,IACA,mBAIA,kBACA,4BAEA,aACA,IACA,GACA,EACA,EACA,EAEA,OACA,cAGA,4BACA,EAIA,cACA,SAGA,IACA,iBAIA,mBACA,MACA,gBACA,EACA,aAEA,eAEA,4BAGA,iBACA,MACA,MACA,sBACA,EACA,iBACA,GAEA,cAEA,4BAGA,IACA,iBACA,MACA,MACA,mBACA,QACA,YACA,kBAIA,eACA,yBAEA,2BA5LA,mCADA,IAKA,wBACA,4BACA,OAKA,MAGA,uBA+KA,EACA,EACA,IAeA,SACA,QACA,kBAjHA,QAIA,OAHA,OACA,UACA,IAEA,OACA,OACA,QAEA,SACA,EAIA,EA6GA,kBA1BA,KACA,OACA,SACA,SAEA,GADA,aAEA,aAEA,YACA,EAIA,eAcA,OACA,EAAG,yCAeH,GAAC","file":"netcdfjs.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"netcdfjs\"] = factory();\n\telse\n\t\troot[\"netcdfjs\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 4f17d0665f763d40fc22","'use strict';\n\n/**\n * Throws a non-valid NetCDF exception if the statement it's true\n * @ignore\n * @param {boolean} statement - Throws if true\n * @param {string} reason - Reason to throw\n */\nfunction notNetcdf(statement, reason) {\n    if (statement) {\n        throw new TypeError('Not a valid NetCDF v3.x file: ' + reason);\n    }\n}\n\n/**\n * Moves 1, 2, or 3 bytes to next 4-byte boundary\n * @ignore\n * @param {IOBuffer} buffer - Buffer for the file data\n */\nfunction padding(buffer) {\n    if ((buffer.offset % 4) !== 0) {\n        buffer.skip(4 - (buffer.offset % 4));\n    }\n}\n\n\n/**\n * Reads the name\n * @ignore\n * @param {IOBuffer} buffer - Buffer for the file data\n * @return {string} - Name\n */\nfunction readName(buffer) {\n    // Read name\n    var nameLength = buffer.readUint32();\n    var name = buffer.readChars(nameLength);\n\n    // validate name\n    // TODO\n\n    // Apply padding\n    padding(buffer);\n    return name;\n}\n\nmodule.exports.notNetcdf = notNetcdf;\nmodule.exports.padding = padding;\nmodule.exports.readName = readName;\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils.js","'use strict';\n\nconst notNetcdf = require('./utils').notNetcdf;\n\nconst types = {\n    BYTE: 1,\n    CHAR: 2,\n    SHORT: 3,\n    INT: 4,\n    FLOAT: 5,\n    DOUBLE: 6\n};\n\n/**\n * Parse a number into their respective type\n * @ignore\n * @param {number} type - integer that represents the type\n * @return {string} - parsed value of the type\n */\nfunction num2str(type) {\n    switch (Number(type)) {\n        case types.BYTE:\n            return 'byte';\n        case types.CHAR:\n            return 'char';\n        case types.SHORT:\n            return 'short';\n        case types.INT:\n            return 'int';\n        case types.FLOAT:\n            return 'float';\n        case types.DOUBLE:\n            return 'double';\n        /* istanbul ignore next */\n        default:\n            return 'undefined';\n    }\n}\n\n/**\n * Parse a number type identifier to his size in bytes\n * @ignore\n * @param {number} type - integer that represents the type\n * @return {number} -size of the type\n */\nfunction num2bytes(type) {\n    switch (Number(type)) {\n        case types.BYTE:\n            return 1;\n        case types.CHAR:\n            return 1;\n        case types.SHORT:\n            return 2;\n        case types.INT:\n            return 4;\n        case types.FLOAT:\n            return 4;\n        case types.DOUBLE:\n            return 8;\n        /* istanbul ignore next */\n        default:\n            return -1;\n    }\n}\n\n/**\n * Reverse search of num2str\n * @ignore\n * @param {string} type - string that represents the type\n * @return {number} - parsed value of the type\n */\nfunction str2num(type) {\n    switch (String(type)) {\n        case 'byte':\n            return types.BYTE;\n        case 'char':\n            return types.CHAR;\n        case 'short':\n            return types.SHORT;\n        case 'int':\n            return types.INT;\n        case 'float':\n            return types.FLOAT;\n        case 'double':\n            return types.DOUBLE;\n        /* istanbul ignore next */\n        default:\n            return -1;\n    }\n}\n\n/**\n * Auxiliary function to read numeric data\n * @ignore\n * @param {number} size - Size of the element to read\n * @param {function} bufferReader - Function to read next value\n * @return {Array<number>|number}\n */\nfunction readNumber(size, bufferReader) {\n    if (size !== 1) {\n        var numbers = new Array(size);\n        for (var i = 0; i < size; i++) {\n            numbers[i] = bufferReader();\n        }\n        return numbers;\n    } else {\n        return bufferReader();\n    }\n}\n\n/**\n * Given a type and a size reads the next element\n * @ignore\n * @param {IOBuffer} buffer - Buffer for the file data\n * @param {number} type - Type of the data to read\n * @param {number} size - Size of the element to read\n * @return {string|Array<number>|number}\n */\nfunction readType(buffer, type, size) {\n    switch (type) {\n        case types.BYTE:\n            return buffer.readBytes(size);\n        case types.CHAR:\n            return trimNull(buffer.readChars(size));\n        case types.SHORT:\n            return readNumber(size, buffer.readInt16.bind(buffer));\n        case types.INT:\n            return readNumber(size, buffer.readInt32.bind(buffer));\n        case types.FLOAT:\n            return readNumber(size, buffer.readFloat32.bind(buffer));\n        case types.DOUBLE:\n            return readNumber(size, buffer.readFloat64.bind(buffer));\n        /* istanbul ignore next */\n        default:\n            notNetcdf(true, 'non valid type ' + type);\n            return undefined;\n    }\n}\n\n/**\n * Removes null terminate value\n * @ignore\n * @param {string} value - String to trim\n * @return {string} - Trimmed string\n */\nfunction trimNull(value) {\n    if (value.charCodeAt(value.length - 1) === 0) {\n        return value.substring(0, value.length - 1);\n    }\n    return value;\n}\n\nmodule.exports = types;\nmodule.exports.num2str = num2str;\nmodule.exports.num2bytes = num2bytes;\nmodule.exports.str2num = str2num;\nmodule.exports.readType = readType;\n\n\n\n// WEBPACK FOOTER //\n// ./src/types.js","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 2\n// module chunks = 0","'use strict';\n\nconst types = require('./types');\n\n// const STREAMING = 4294967295;\n\n/**\n * Read data for the given non-record variable\n * @ignore\n * @param {IOBuffer} buffer - Buffer for the file data\n * @param {object} variable - Variable metadata\n * @return {Array} - Data of the element\n */\nfunction nonRecord(buffer, variable) {\n    // variable type\n    const type = types.str2num(variable.type);\n\n    // size of the data\n    var size = variable.size / types.num2bytes(type);\n\n    // iterates over the data\n    var data = new Array(size);\n    for (var i = 0; i < size; i++) {\n        data[i] = types.readType(buffer, type, 1);\n    }\n\n    return data;\n}\n\n/**\n * Read data for the given record variable\n * @ignore\n * @param {IOBuffer} buffer - Buffer for the file data\n * @param {object} variable - Variable metadata\n * @param {object} recordDimension - Record dimension metadata\n * @return {Array} - Data of the element\n */\nfunction record(buffer, variable, recordDimension) {\n    // variable type\n    const type = types.str2num(variable.type);\n    const width = variable.size ? variable.size / types.num2bytes(type) : 1;\n\n    // size of the data\n    // TODO streaming data\n    var size = recordDimension.length;\n\n    // iterates over the data\n    var data = new Array(size);\n    const step = recordDimension.recordStep;\n\n    for (var i = 0; i < size; i++) {\n        var currentOffset = buffer.offset;\n        data[i] = types.readType(buffer, type, width);\n        buffer.seek(currentOffset + step);\n    }\n\n    return data;\n}\n\nmodule.exports.nonRecord = nonRecord;\nmodule.exports.record = record;\n\n\n\n// WEBPACK FOOTER //\n// ./src/data.js","'use strict';\n\nconst utils = require('./utils');\nconst types = require('./types');\n\n// Grammar constants\nconst ZERO = 0;\nconst NC_DIMENSION = 10;\nconst NC_VARIABLE = 11;\nconst NC_ATTRIBUTE = 12;\n\n/**\n * Read the header of the file\n * @ignore\n * @param {IOBuffer} buffer - Buffer for the file data\n * @return {object} - Object with the fields:\n *  * `recordDimension`: Number with the length of record dimension\n *  * `dimensions`: List of dimensions\n *  * `globalAttributes`: List of global attributes\n *  * `variables`: List of variables\n */\nfunction header(buffer, version) {\n    // Length of record dimension\n    // sum of the varSize's of all the record variables.\n    var header = {recordDimension: {length: buffer.readUint32()}};\n\n    // List of dimensions\n    var dimList = dimensionsList(buffer);\n    header.recordDimension.id = dimList.recordId;\n    header.recordDimension.name = dimList.recordName;\n    header.dimensions = dimList.dimensions;\n\n    // List of global attributes\n    header.globalAttributes = attributesList(buffer);\n\n    // List of variables\n    var variables = variablesList(buffer, dimList.recordId, version);\n    header.variables = variables.variables;\n    header.recordDimension.recordStep = variables.recordStep;\n\n    return header;\n}\n\n/**\n * List of dimensions\n * @ignore\n * @param {IOBuffer} buffer - Buffer for the file data\n * @return {object} - List of dimensions and record dimension with:\n *  * `name`: String with the name of the dimension\n *  * `size`: Number with the size of the dimension\n */\nfunction dimensionsList(buffer) {\n    var recordId, recordName;\n    const dimList = buffer.readUint32();\n    if (dimList === ZERO) {\n        utils.notNetcdf((buffer.readUint32() !== ZERO), 'wrong empty tag for list of dimensions');\n        return [];\n    } else {\n        utils.notNetcdf((dimList !== NC_DIMENSION), 'wrong tag for list of dimensions');\n\n        // Length of dimensions\n        const dimensionSize = buffer.readUint32();\n        var dimensions = new Array(dimensionSize);\n        for (var dim = 0; dim < dimensionSize; dim++) {\n            // Read name\n            var name = utils.readName(buffer);\n\n            // Read dimension size\n            const size = buffer.readUint32();\n            if (size === 0) {\n                recordId = dim;\n                recordName = name;\n            }\n\n            dimensions[dim] = {\n                name: name,\n                size: size\n            };\n        }\n    }\n    return {\n        dimensions: dimensions,\n        recordId: recordId,\n        recordName: recordName\n    };\n}\n\n/**\n * List of attributes\n * @ignore\n * @param {IOBuffer} buffer - Buffer for the file data\n * @return {Array<object>} - List of attributes with:\n *  * `name`: String with the name of the attribute\n *  * `type`: String with the type of the attribute\n *  * `value`: A number or string with the value of the attribute\n */\nfunction attributesList(buffer) {\n    const gAttList = buffer.readUint32();\n    if (gAttList === ZERO) {\n        utils.notNetcdf((buffer.readUint32() !== ZERO), 'wrong empty tag for list of attributes');\n        return [];\n    } else {\n        utils.notNetcdf((gAttList !== NC_ATTRIBUTE), 'wrong tag for list of attributes');\n\n        // Length of attributes\n        const attributeSize = buffer.readUint32();\n        var attributes = new Array(attributeSize);\n        for (var gAtt = 0; gAtt < attributeSize; gAtt++) {\n            // Read name\n            var name = utils.readName(buffer);\n\n            // Read type\n            var type = buffer.readUint32();\n            utils.notNetcdf(((type < 1) || (type > 6)), 'non valid type ' + type);\n\n            // Read attribute\n            var size = buffer.readUint32();\n            var value = types.readType(buffer, type, size);\n\n            // Apply padding\n            utils.padding(buffer);\n\n            attributes[gAtt] = {\n                name: name,\n                type: types.num2str(type),\n                value: value\n            };\n        }\n    }\n    return attributes;\n}\n\n/**\n * List of variables\n * @ignore\n * @param {IOBuffer} buffer - Buffer for the file data\n * @param {number} recordId - Id if the record dimension\n * @return {object} - Number of recordStep and list of variables with:\n *  * `name`: String with the name of the variable\n *  * `dimensions`: Array with the dimension IDs of the variable\n *  * `attributes`: Array with the attributes of the variable\n *  * `type`: String with the type of the variable\n *  * `size`: Number with the size of the variable\n *  * `offset`: Number with the offset where of the variable begins\n *  * `record`: True if is a record variable, false otherwise\n */\nfunction variablesList(buffer, recordId, version) {\n    const varList = buffer.readUint32();\n    var recordStep = 0;\n    if (varList === ZERO) {\n        utils.notNetcdf((buffer.readUint32() !== ZERO), 'wrong empty tag for list of variables');\n        return [];\n    } else {\n        utils.notNetcdf((varList !== NC_VARIABLE), 'wrong tag for list of variables');\n\n        // Length of variables\n        const variableSize = buffer.readUint32();\n        var variables = new Array(variableSize);\n        for (var v = 0; v < variableSize; v++) {\n            // Read name\n            var name = utils.readName(buffer);\n\n            // Read dimensionality of the variable\n            const dimensionality = buffer.readUint32();\n\n            // Index into the list of dimensions\n            var dimensionsIds = new Array(dimensionality);\n            for (var dim = 0; dim < dimensionality; dim++) {\n                dimensionsIds[dim] = buffer.readUint32();\n            }\n\n            // Read variables size\n            var attributes = attributesList(buffer);\n\n            // Read type\n            var type = buffer.readUint32();\n            utils.notNetcdf(((type < 1) && (type > 6)), 'non valid type ' + type);\n\n            // Read variable size\n            // The 32-bit varSize field is not large enough to contain the size of variables that require\n            // more than 2^32 - 4 bytes, so 2^32 - 1 is used in the varSize field for such variables.\n            const varSize = buffer.readUint32();\n\n            // Read offset\n            // TODO change it for supporting 64-bit\n            var offset = buffer.readUint32();\n            if(version === 2) {\n                utils.notNetcdf((offset != 0), 'offsets larger than 4GB not supported');                \n                offset = buffer.readUint32();\n            }\n\n            // Count amount of record variables\n            if (dimensionsIds[0] === recordId) {\n                recordStep += varSize;\n            }\n\n            variables[v] = {\n                name: name,\n                dimensions: dimensionsIds,\n                attributes: attributes,\n                type: types.num2str(type),\n                size: varSize,\n                offset: offset,\n                record: (dimensionsIds[0] === recordId)\n            };\n        }\n    }\n\n    return {\n        variables: variables,\n        recordStep: recordStep\n    };\n}\n\nmodule.exports = header;\n\n\n\n// WEBPACK FOOTER //\n// ./src/header.js","'use strict';\n\nconst utf8 = require('utf8');\n\nconst defaultByteLength = 1024 * 8;\nconst charArray = [];\n\n/**\n * IOBuffer\n * @constructor\n * @param {undefined|number|ArrayBuffer|TypedArray|IOBuffer|Buffer} data - The data to construct the IOBuffer with.\n *\n * If it's a number, it will initialize the buffer with the number as the buffer's length<br>\n * If it's undefined, it will initialize the buffer with a default length of 8 Kb<br>\n * If its an ArrayBuffer, a TypedArray, an IOBuffer instance,\n * or a Node.js Buffer, it will create a view over the underlying ArrayBuffer.\n * @param {object} [options]\n * @param {number} [options.offset=0] - Ignore the first n bytes of the ArrayBuffer\n * @property {ArrayBuffer} buffer - Reference to the internal ArrayBuffer object\n * @property {number} length - Byte length of the internal ArrayBuffer\n * @property {number} offset - The current offset of the buffer's pointer\n * @property {number} byteLength - Byte length of the internal ArrayBuffer\n * @property {number} byteOffset - Byte offset of the internal ArrayBuffer\n */\nclass IOBuffer {\n    constructor(data, options) {\n        options = options || {};\n        var dataIsGiven = false;\n        if (data === undefined) {\n            data = defaultByteLength;\n        }\n        if (typeof data === 'number') {\n            data = new ArrayBuffer(data);\n        } else {\n            dataIsGiven = true;\n            this._lastWrittenByte = data.byteLength;\n        }\n\n        const offset = options.offset ? options.offset >>> 0 : 0;\n        let byteLength = data.byteLength - offset;\n        let dvOffset = offset;\n        if (data.buffer) {\n            if (data.byteLength !== data.buffer.byteLength) {\n                dvOffset = data.byteOffset + offset;\n            }\n            data = data.buffer;\n        }\n        if (dataIsGiven) {\n            this._lastWrittenByte = byteLength;\n        } else {\n            this._lastWrittenByte = 0;\n        }\n        this.buffer = data;\n        this.length = byteLength;\n        this.byteLength = byteLength;\n        this.byteOffset = dvOffset;\n        this.offset = 0;\n        this.littleEndian = true;\n        this._data = new DataView(this.buffer, dvOffset, byteLength);\n        this._mark = 0;\n        this._marks = [];\n    }\n\n    /**\n     * Checks if the memory allocated to the buffer is sufficient to store more bytes after the offset\n     * @param {number} [byteLength=1] The needed memory in bytes\n     * @return {boolean} Returns true if there is sufficient space and false otherwise\n     */\n    available(byteLength) {\n        if (byteLength === undefined) byteLength = 1;\n        return (this.offset + byteLength) <= this.length;\n    }\n\n    /**\n     * Check if little-endian mode is used for reading and writing multi-byte values\n     * @return {boolean} Returns true if little-endian mode is used, false otherwise\n     */\n    isLittleEndian() {\n        return this.littleEndian;\n    }\n\n    /**\n     * Set little-endian mode for reading and writing multi-byte values\n     * @return {IOBuffer}\n     */\n    setLittleEndian() {\n        this.littleEndian = true;\n        return this;\n    }\n\n    /**\n     * Check if big-endian mode is used for reading and writing multi-byte values\n     * @return {boolean} Returns true if big-endian mode is used, false otherwise\n     */\n    isBigEndian() {\n        return !this.littleEndian;\n    }\n\n    /**\n     * Switches to big-endian mode for reading and writing multi-byte values\n     * @return {IOBuffer}\n     */\n    setBigEndian() {\n        this.littleEndian = false;\n        return this;\n    }\n\n    /**\n     * Move the pointer n bytes forward\n     * @param {number} n\n     * @return {IOBuffer}\n     */\n    skip(n) {\n        if (n === undefined) n = 1;\n        this.offset += n;\n        return this;\n    }\n\n    /**\n     * Move the pointer to the given offset\n     * @param {number} offset\n     * @return {IOBuffer}\n     */\n    seek(offset) {\n        this.offset = offset;\n        return this;\n    }\n\n    /**\n     * Store the current pointer offset.\n     * @see {@link IOBuffer#reset}\n     * @return {IOBuffer}\n     */\n    mark() {\n        this._mark = this.offset;\n        return this;\n    }\n\n    /**\n     * Move the pointer back to the last pointer offset set by mark\n     * @see {@link IOBuffer#mark}\n     * @return {IOBuffer}\n     */\n    reset() {\n        this.offset = this._mark;\n        return this;\n    }\n\n    /**\n     * Push the current pointer offset to the mark stack\n     * @see {@link IOBuffer#popMark}\n     * @return {IOBuffer}\n     */\n    pushMark() {\n        this._marks.push(this.offset);\n        return this;\n    }\n\n    /**\n     * Pop the last pointer offset from the mark stack, and set the current pointer offset to the popped value\n     * @see {@link IOBuffer#pushMark}\n     * @return {IOBuffer}\n     */\n    popMark() {\n        const offset = this._marks.pop();\n        if (offset === undefined) throw new Error('Mark stack empty');\n        this.seek(offset);\n        return this;\n    }\n\n    /**\n     * Move the pointer offset back to 0\n     * @return {IOBuffer}\n     */\n    rewind() {\n        this.offset = 0;\n        return this;\n    }\n\n    /**\n     * Make sure the buffer has sufficient memory to write a given byteLength at the current pointer offset\n     * If the buffer's memory is insufficient, this method will create a new buffer (a copy) with a length\n     * that is twice (byteLength + current offset)\n     * @param {number} [byteLength = 1]\n     * @return {IOBuffer}\n     */\n    ensureAvailable(byteLength) {\n        if (byteLength === undefined) byteLength = 1;\n        if (!this.available(byteLength)) {\n            const lengthNeeded = this.offset + byteLength;\n            const newLength = lengthNeeded * 2;\n            const newArray = new Uint8Array(newLength);\n            newArray.set(new Uint8Array(this.buffer));\n            this.buffer = newArray.buffer;\n            this.length = this.byteLength = newLength;\n            this._data = new DataView(this.buffer);\n        }\n        return this;\n    }\n\n    /**\n     * Read a byte and return false if the byte's value is 0, or true otherwise\n     * Moves pointer forward\n     * @return {boolean}\n     */\n    readBoolean() {\n        return this.readUint8() !== 0;\n    }\n\n    /**\n     * Read a signed 8-bit integer and move pointer forward\n     * @return {number}\n     */\n    readInt8() {\n        return this._data.getInt8(this.offset++);\n    }\n\n    /**\n     * Read an unsigned 8-bit integer and move pointer forward\n     * @return {number}\n     */\n    readUint8() {\n        return this._data.getUint8(this.offset++);\n    }\n\n    /**\n     * Alias for {@link IOBuffer#readUint8}\n     * @return {number}\n     */\n    readByte() {\n        return this.readUint8();\n    }\n\n    /**\n     * Read n bytes and move pointer forward.\n     * @param {number} n\n     * @return {Uint8Array}\n     */\n    readBytes(n) {\n        if (n === undefined) n = 1;\n        var bytes = new Uint8Array(n);\n        for (var i = 0; i < n; i++) {\n            bytes[i] = this.readByte();\n        }\n        return bytes;\n    }\n\n    /**\n     * Read a 16-bit signed integer and move pointer forward\n     * @return {number}\n     */\n    readInt16() {\n        var value = this._data.getInt16(this.offset, this.littleEndian);\n        this.offset += 2;\n        return value;\n    }\n\n    /**\n     * Read a 16-bit unsigned integer and move pointer forward\n     * @return {number}\n     */\n    readUint16() {\n        var value = this._data.getUint16(this.offset, this.littleEndian);\n        this.offset += 2;\n        return value;\n    }\n\n    /**\n     * Read a 32-bit signed integer and move pointer forward\n     * @return {number}\n     */\n    readInt32() {\n        var value = this._data.getInt32(this.offset, this.littleEndian);\n        this.offset += 4;\n        return value;\n    }\n\n    /**\n     * Read a 32-bit unsigned integer and move pointer forward\n     * @return {number}\n     */\n    readUint32() {\n        var value = this._data.getUint32(this.offset, this.littleEndian);\n        this.offset += 4;\n        return value;\n    }\n\n    /**\n     * Read a 32-bit floating number and move pointer forward\n     * @return {number}\n     */\n    readFloat32() {\n        var value = this._data.getFloat32(this.offset, this.littleEndian);\n        this.offset += 4;\n        return value;\n    }\n\n    /**\n     * Read a 64-bit floating number and move pointer forward\n     * @return {number}\n     */\n    readFloat64() {\n        var value = this._data.getFloat64(this.offset, this.littleEndian);\n        this.offset += 8;\n        return value;\n    }\n\n    /**\n     * Read 1-byte ascii character and move pointer forward\n     * @return {string}\n     */\n    readChar() {\n        return String.fromCharCode(this.readInt8());\n    }\n\n    /**\n     * Read n 1-byte ascii characters and move pointer forward\n     * @param {number} n\n     * @return {string}\n     */\n    readChars(n) {\n        if (n === undefined) n = 1;\n        charArray.length = n;\n        for (var i = 0; i < n; i++) {\n            charArray[i] = this.readChar();\n        }\n        return charArray.join('');\n    }\n\n    /**\n     * Read the next n bytes, return a UTF-8 decoded string and move pointer forward\n     * @param {number} n\n     * @return {string}\n     */\n    readUtf8(n) {\n        if (n === undefined) n = 1;\n        const bString = this.readChars(n);\n        return utf8.decode(bString);\n    }\n\n    /**\n     * Write 0xff if the passed value is truthy, 0x00 otherwise\n     * @param {any} value\n     * @return {IOBuffer}\n     */\n    writeBoolean(value) {\n        this.writeUint8(value ? 0xff : 0x00);\n        return this;\n    }\n\n    /**\n     * Write value as an 8-bit signed integer\n     * @param {number} value\n     * @return {IOBuffer}\n     */\n    writeInt8(value) {\n        this.ensureAvailable(1);\n        this._data.setInt8(this.offset++, value);\n        this._updateLastWrittenByte();\n        return this;\n    }\n\n    /**\n     * Write value as a 8-bit unsigned integer\n     * @param {number} value\n     * @return {IOBuffer}\n     */\n    writeUint8(value) {\n        this.ensureAvailable(1);\n        this._data.setUint8(this.offset++, value);\n        this._updateLastWrittenByte();\n        return this;\n    }\n\n    /**\n     * An alias for {@link IOBuffer#writeUint8}\n     * @param {number} value\n     * @return {IOBuffer}\n     */\n    writeByte(value) {\n        return this.writeUint8(value);\n    }\n\n    /**\n     * Write bytes\n     * @param {Array|Uint8Array} bytes\n     * @return {IOBuffer}\n     */\n    writeBytes(bytes) {\n        this.ensureAvailable(bytes.length);\n        for (var i = 0; i < bytes.length; i++) {\n            this._data.setUint8(this.offset++, bytes[i]);\n        }\n        this._updateLastWrittenByte();\n        return this;\n    }\n\n    /**\n     * Write value as an 16-bit signed integer\n     * @param {number} value\n     * @return {IOBuffer}\n     */\n    writeInt16(value) {\n        this.ensureAvailable(2);\n        this._data.setInt16(this.offset, value, this.littleEndian);\n        this.offset += 2;\n        this._updateLastWrittenByte();\n        return this;\n    }\n\n    /**\n     * Write value as a 16-bit unsigned integer\n     * @param {number} value\n     * @return {IOBuffer}\n     */\n    writeUint16(value) {\n        this.ensureAvailable(2);\n        this._data.setUint16(this.offset, value, this.littleEndian);\n        this.offset += 2;\n        this._updateLastWrittenByte();\n        return this;\n    }\n\n    /**\n     * Write a 32-bit signed integer at the current pointer offset\n     * @param {number} value\n     * @return {IOBuffer}\n     */\n    writeInt32(value) {\n        this.ensureAvailable(4);\n        this._data.setInt32(this.offset, value, this.littleEndian);\n        this.offset += 4;\n        this._updateLastWrittenByte();\n        return this;\n    }\n\n    /**\n     * Write a 32-bit unsigned integer at the current pointer offset\n     * @param {number} value - The value to set\n     * @return {IOBuffer}\n     */\n    writeUint32(value) {\n        this.ensureAvailable(4);\n        this._data.setUint32(this.offset, value, this.littleEndian);\n        this.offset += 4;\n        this._updateLastWrittenByte();\n        return this;\n    }\n\n    /**\n     * Write a 32-bit floating number at the current pointer offset\n     * @param {number} value - The value to set\n     * @return {IOBuffer}\n     */\n    writeFloat32(value) {\n        this.ensureAvailable(4);\n        this._data.setFloat32(this.offset, value, this.littleEndian);\n        this.offset += 4;\n        this._updateLastWrittenByte();\n        return this;\n    }\n\n    /**\n     * Write a 64-bit floating number at the current pointer offset\n     * @param {number} value\n     * @return {IOBuffer}\n     */\n    writeFloat64(value) {\n        this.ensureAvailable(8);\n        this._data.setFloat64(this.offset, value, this.littleEndian);\n        this.offset += 8;\n        this._updateLastWrittenByte();\n        return this;\n    }\n\n    /**\n     * Write the charCode of the passed string's first character to the current pointer offset\n     * @param {string} str - The character to set\n     * @return {IOBuffer}\n     */\n    writeChar(str) {\n        return this.writeUint8(str.charCodeAt(0));\n    }\n\n    /**\n     * Write the charCodes of the passed string's characters to the current pointer offset\n     * @param {string} str\n     * @return {IOBuffer}\n     */\n    writeChars(str) {\n        for (var i = 0; i < str.length; i++) {\n            this.writeUint8(str.charCodeAt(i));\n        }\n        return this;\n    }\n\n    /**\n     * UTF-8 encode and write the passed string to the current pointer offset\n     * @param {string} str\n     * @return {IOBuffer}\n     */\n    writeUtf8(str) {\n        const bString = utf8.encode(str);\n        return this.writeChars(bString);\n    }\n\n    /**\n     * Export a Uint8Array view of the internal buffer.\n     * The view starts at the byte offset and its length\n     * is calculated to stop at the last written byte or the original length.\n     * @return {Uint8Array}\n     */\n    toArray() {\n        return new Uint8Array(this.buffer, this.byteOffset, this._lastWrittenByte);\n    }\n\n    /**\n     * Same as {@link IOBuffer#toArray} but returns a Buffer if possible. Otherwise returns a Uint8Array.\n     * @return {Buffer|Uint8Array}\n     */\n    getBuffer() {\n        if (typeof Buffer !== 'undefined') {\n            return Buffer.from(this.toArray());\n        } else {\n            return this.toArray();\n        }\n    }\n\n    /**\n     * Update the last written byte offset\n     * @private\n     */\n    _updateLastWrittenByte() {\n        if (this.offset > this._lastWrittenByte) {\n            this._lastWrittenByte = this.offset;\n        }\n    }\n}\n\nmodule.exports = IOBuffer;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/iobuffer/IOBuffer.js\n// module id = 5\n// module chunks = 0","'use strict';\n\nconst IOBuffer = require('iobuffer');\nconst utils = require('./utils');\nconst data = require('./data');\nconst readHeader = require('./header');\n\n/**\n * Reads a NetCDF v3.x file\n * https://www.unidata.ucar.edu/software/netcdf/docs/file_format_specifications.html\n * @param {ArrayBuffer} data - ArrayBuffer or any Typed Array (including Node.js' Buffer from v4) with the data\n * @constructor\n */\nclass NetCDFReader {\n    constructor(data) {\n        const buffer = new IOBuffer(data);\n        buffer.setBigEndian();\n\n        // Validate that it's a NetCDF file\n        utils.notNetcdf((buffer.readChars(3) !== 'CDF'), 'should start with CDF');\n\n        // Check the NetCDF format\n        const version = buffer.readByte();\n        utils.notNetcdf((version > 2), 'unknown version');\n\n        // Read the header\n        this.header = readHeader(buffer, version);\n        this.header.version = version;\n        this.buffer = buffer;\n    }\n\n    /**\n     * @return {string} - Version for the NetCDF format\n     */\n    get version() {\n        if (this.header.version === 1) {\n            return 'classic format';\n        } else {\n            return '64-bit offset format';\n        }\n    }\n\n    /**\n     * @return {object} - Metadata for the record dimension\n     *  * `length`: Number of elements in the record dimension\n     *  * `id`: Id number in the list of dimensions for the record dimension\n     *  * `name`: String with the name of the record dimension\n     *  * `recordStep`: Number with the record variables step size\n     */\n    get recordDimension() {\n        return this.header.recordDimension;\n    }\n\n    /**\n     * @return {Array<object>} - List of dimensions with:\n     *  * `name`: String with the name of the dimension\n     *  * `size`: Number with the size of the dimension\n     */\n    get dimensions() {\n        return this.header.dimensions;\n    }\n\n    /**\n     * @return {Array<object>} - List of global attributes with:\n     *  * `name`: String with the name of the attribute\n     *  * `type`: String with the type of the attribute\n     *  * `value`: A number or string with the value of the attribute\n     */\n    get globalAttributes() {\n        return this.header.globalAttributes;\n    }\n\n    /**\n     * @return {Array<object>} - List of variables with:\n     *  * `name`: String with the name of the variable\n     *  * `dimensions`: Array with the dimension IDs of the variable\n     *  * `attributes`: Array with the attributes of the variable\n     *  * `type`: String with the type of the variable\n     *  * `size`: Number with the size of the variable\n     *  * `offset`: Number with the offset where of the variable begins\n     *  * `record`: True if is a record variable, false otherwise\n     */\n    get variables() {\n        return this.header.variables;\n    }\n\n    /**\n     * Retrieves the data for a given variable\n     * @param {string|object} variableName - Name of the variable to search or variable object\n     * @return {Array} - List with the variable values\n     */\n    getDataVariable(variableName) {\n        var variable;\n        if (typeof variableName === 'string') {\n            // search the variable\n            variable = this.header.variables.find(function (val) {\n                return val.name === variableName;\n            });\n        } else {\n            variable = variableName;\n        }\n\n        // throws if variable not found\n        utils.notNetcdf((variable === undefined), 'variable not found');\n\n        // go to the offset position\n        this.buffer.seek(variable.offset);\n\n        if (variable.record) {\n            // record variable case\n            return data.record(this.buffer, variable, this.header.recordDimension);\n        } else {\n            // non-record variable case\n            return data.nonRecord(this.buffer, variable);\n        }\n    }\n}\n\nmodule.exports = NetCDFReader;\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/module.js\n// module id = 7\n// module chunks = 0","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/~/node-libs-browser/~/buffer/index.js\n// module id = 8\n// module chunks = 0","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction placeHoldersCount (b64) {\n  var len = b64.length\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n}\n\nfunction byteLength (b64) {\n  // base64 is 4/3 + up to two characters of the original data\n  return b64.length * 3 / 4 - placeHoldersCount(b64)\n}\n\nfunction toByteArray (b64) {\n  var i, j, l, tmp, placeHolders, arr\n  var len = b64.length\n  placeHolders = placeHoldersCount(b64)\n\n  arr = new Arr(len * 3 / 4 - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/~/node-libs-browser/~/buffer/~/base64-js/index.js\n// module id = 9\n// module chunks = 0","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/~/node-libs-browser/~/buffer/~/ieee754/index.js\n// module id = 10\n// module chunks = 0","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/~/node-libs-browser/~/buffer/~/isarray/index.js\n// module id = 11\n// module chunks = 0","/*! https://mths.be/utf8js v2.1.2 by @mathias */\n;(function(root) {\n\n\t// Detect free variables `exports`\n\tvar freeExports = typeof exports == 'object' && exports;\n\n\t// Detect free variable `module`\n\tvar freeModule = typeof module == 'object' && module &&\n\t\tmodule.exports == freeExports && module;\n\n\t// Detect free variable `global`, from Node.js or Browserified code,\n\t// and use it as `root`\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {\n\t\troot = freeGlobal;\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\tvar stringFromCharCode = String.fromCharCode;\n\n\t// Taken from https://mths.be/punycode\n\tfunction ucs2decode(string) {\n\t\tvar output = [];\n\t\tvar counter = 0;\n\t\tvar length = string.length;\n\t\tvar value;\n\t\tvar extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t// Taken from https://mths.be/punycode\n\tfunction ucs2encode(array) {\n\t\tvar length = array.length;\n\t\tvar index = -1;\n\t\tvar value;\n\t\tvar output = '';\n\t\twhile (++index < length) {\n\t\t\tvalue = array[index];\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t}\n\t\treturn output;\n\t}\n\n\tfunction checkScalarValue(codePoint) {\n\t\tif (codePoint >= 0xD800 && codePoint <= 0xDFFF) {\n\t\t\tthrow Error(\n\t\t\t\t'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +\n\t\t\t\t' is not a scalar value'\n\t\t\t);\n\t\t}\n\t}\n\t/*--------------------------------------------------------------------------*/\n\n\tfunction createByte(codePoint, shift) {\n\t\treturn stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);\n\t}\n\n\tfunction encodeCodePoint(codePoint) {\n\t\tif ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence\n\t\t\treturn stringFromCharCode(codePoint);\n\t\t}\n\t\tvar symbol = '';\n\t\tif ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence\n\t\t\tsymbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);\n\t\t}\n\t\telse if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence\n\t\t\tcheckScalarValue(codePoint);\n\t\t\tsymbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);\n\t\t\tsymbol += createByte(codePoint, 6);\n\t\t}\n\t\telse if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence\n\t\t\tsymbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);\n\t\t\tsymbol += createByte(codePoint, 12);\n\t\t\tsymbol += createByte(codePoint, 6);\n\t\t}\n\t\tsymbol += stringFromCharCode((codePoint & 0x3F) | 0x80);\n\t\treturn symbol;\n\t}\n\n\tfunction utf8encode(string) {\n\t\tvar codePoints = ucs2decode(string);\n\t\tvar length = codePoints.length;\n\t\tvar index = -1;\n\t\tvar codePoint;\n\t\tvar byteString = '';\n\t\twhile (++index < length) {\n\t\t\tcodePoint = codePoints[index];\n\t\t\tbyteString += encodeCodePoint(codePoint);\n\t\t}\n\t\treturn byteString;\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\tfunction readContinuationByte() {\n\t\tif (byteIndex >= byteCount) {\n\t\t\tthrow Error('Invalid byte index');\n\t\t}\n\n\t\tvar continuationByte = byteArray[byteIndex] & 0xFF;\n\t\tbyteIndex++;\n\n\t\tif ((continuationByte & 0xC0) == 0x80) {\n\t\t\treturn continuationByte & 0x3F;\n\t\t}\n\n\t\t// If we end up here, it’s not a continuation byte\n\t\tthrow Error('Invalid continuation byte');\n\t}\n\n\tfunction decodeSymbol() {\n\t\tvar byte1;\n\t\tvar byte2;\n\t\tvar byte3;\n\t\tvar byte4;\n\t\tvar codePoint;\n\n\t\tif (byteIndex > byteCount) {\n\t\t\tthrow Error('Invalid byte index');\n\t\t}\n\n\t\tif (byteIndex == byteCount) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Read first byte\n\t\tbyte1 = byteArray[byteIndex] & 0xFF;\n\t\tbyteIndex++;\n\n\t\t// 1-byte sequence (no continuation bytes)\n\t\tif ((byte1 & 0x80) == 0) {\n\t\t\treturn byte1;\n\t\t}\n\n\t\t// 2-byte sequence\n\t\tif ((byte1 & 0xE0) == 0xC0) {\n\t\t\tbyte2 = readContinuationByte();\n\t\t\tcodePoint = ((byte1 & 0x1F) << 6) | byte2;\n\t\t\tif (codePoint >= 0x80) {\n\t\t\t\treturn codePoint;\n\t\t\t} else {\n\t\t\t\tthrow Error('Invalid continuation byte');\n\t\t\t}\n\t\t}\n\n\t\t// 3-byte sequence (may include unpaired surrogates)\n\t\tif ((byte1 & 0xF0) == 0xE0) {\n\t\t\tbyte2 = readContinuationByte();\n\t\t\tbyte3 = readContinuationByte();\n\t\t\tcodePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;\n\t\t\tif (codePoint >= 0x0800) {\n\t\t\t\tcheckScalarValue(codePoint);\n\t\t\t\treturn codePoint;\n\t\t\t} else {\n\t\t\t\tthrow Error('Invalid continuation byte');\n\t\t\t}\n\t\t}\n\n\t\t// 4-byte sequence\n\t\tif ((byte1 & 0xF8) == 0xF0) {\n\t\t\tbyte2 = readContinuationByte();\n\t\t\tbyte3 = readContinuationByte();\n\t\t\tbyte4 = readContinuationByte();\n\t\t\tcodePoint = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0C) |\n\t\t\t\t(byte3 << 0x06) | byte4;\n\t\t\tif (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {\n\t\t\t\treturn codePoint;\n\t\t\t}\n\t\t}\n\n\t\tthrow Error('Invalid UTF-8 detected');\n\t}\n\n\tvar byteArray;\n\tvar byteCount;\n\tvar byteIndex;\n\tfunction utf8decode(byteString) {\n\t\tbyteArray = ucs2decode(byteString);\n\t\tbyteCount = byteArray.length;\n\t\tbyteIndex = 0;\n\t\tvar codePoints = [];\n\t\tvar tmp;\n\t\twhile ((tmp = decodeSymbol()) !== false) {\n\t\t\tcodePoints.push(tmp);\n\t\t}\n\t\treturn ucs2encode(codePoints);\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\tvar utf8 = {\n\t\t'version': '2.1.2',\n\t\t'encode': utf8encode,\n\t\t'decode': utf8decode\n\t};\n\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine(function() {\n\t\t\treturn utf8;\n\t\t});\n\t}\telse if (freeExports && !freeExports.nodeType) {\n\t\tif (freeModule) { // in Node.js or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = utf8;\n\t\t} else { // in Narwhal or RingoJS v0.7.0-\n\t\t\tvar object = {};\n\t\t\tvar hasOwnProperty = object.hasOwnProperty;\n\t\t\tfor (var key in utf8) {\n\t\t\t\thasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key]);\n\t\t\t}\n\t\t}\n\t} else { // in Rhino or a web browser\n\t\troot.utf8 = utf8;\n\t}\n\n}(this));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/iobuffer/~/utf8/utf8.js\n// module id = 12\n// module chunks = 0"],"sourceRoot":""}